plugins {
	id 'java'
	id 'org.springframework.boot' version '2.7.17'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'
	// id 'com.github.node-gradle.node' version '3.4.0'
}

group = 'com.vijay'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

repositories {
	mavenCentral()
}

dependencies {
    // annotation processor
    annotationProcessor("org.projectlombok:lombok")
    annotationProcessor("org.springframework.boot:spring-boot-configuration-processor")

    // compile only
    compileOnly("org.projectlombok:lombok")

    // runtime only
    runtimeOnly("com.h2database:h2")
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity5'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'org.postgresql:postgresql'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	implementation("com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.9.0")
	implementation 'io.jsonwebtoken:jjwt-api:0.11.2' // Use the latest version available
runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.2' // Use the same version as jjwt-api
runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.2' // Use the same version as jjwt-api

}

tasks.named('bootBuildImage') {
	builder = 'paketobuildpacks/builder-jammy-base:latest'
}

tasks.named('test') {
	useJUnitPlatform()
}

// build.gradle.kts
// task sync {
//     inputs.files fileTree("./src/main/resources/static"), fileTree("./src/main/resources/templates")

//     doLast {
//         copy {
//             from fileTree("./src/main/resources/static")
//             into "build/resources/main/static"
//         }
//         copy {
//             from fileTree("./src/main/resources/templates")
//             into "build/resources/main/templates"
//         }
//     }
// }


// tasks.register(com.github.gradle.node.npm.task.NpxTask, 'tailwind'){
//     command = 'tailwindcss'
//     args = ['-i', './src/main/frontend/main.css', '-o', './src/main/resources/static/main.css', '--watch']
// }
// task tailwind(type: com.github.gradle.node.npm.task.NpxTask) {
//     command = 'tailwindcss'
//     args = ['-i', './src/main/frontend/main.css', '-o', './src/main/resources/static/output.css', '--watch']
// }

// tailwindcss -i ./src/main/frontend/main.css -o ./src/main/resources/static/output.css --watch